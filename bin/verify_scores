#!/usr/bin/python
#
# Verifies whether any scores have changed compared to what's in the
# database, and reports whether there are positive changes, negative
# changes, or "no change".
#
# Only final scores are checked, not intermediate results.
# Intended for use after upgrading software.
#
# Note that this tool will overwrite the encoded files, so after running
# this tool, running verify_encodings is useless.
#
import argparse
import collections
import sys

import mpeg_settings
import encoder
import pick_codec

def VerifyOneTarget(codecs, rate, videofile, score):
  change_counts = collections.Counter()
  for codec_name in codecs:
    codec = pick_codec.PickCodec(codec_name)
    bestsofar = codec.BestEncoding(rate, videofile)
    if score:
      bestsofar.Execute().Store()
    old_score = bestsofar.Score(scoredir='snapshot')
    new_score = bestsofar.Score()
    if not old_score:
      print '%s rate %s file %s has no old score' % (
        codec_name, rate, videofile.basename)
      change_counts['no old score'] += 1
    elif not new_score:
      print '%s rate %s file %s has no new score' % (
        codec_name, rate, videofile.basename)
      change_counts['no new score'] += 1
    else:
      if old_score != new_score:
        print '%s rate %s file %s has changed score from %5.3f to %5.3f - id %s' % (
          codec_name, rate, videofile.basename, old_score, new_score,
          bestsofar.encoder.Hashname())
        if old_score < new_score:
          change_counts['improve'] += 1
        else:
          change_counts['worsen'] += 1
      else:
        change_counts['no change'] += 1

  return change_counts

def VerifyResults(codecs, score):
  change_counts = collections.Counter()
  for classname in mpeg_settings.files.keys():
    for filename in mpeg_settings.files[classname]:
      videofile = encoder.Videofile('video/mpeg_video/' + filename)
      for rate in mpeg_settings.rates[classname]:
        change_counts.update(VerifyOneTarget(codecs, rate, videofile, score))
        print 'Result so far:', change_counts
  return change_counts

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('codecs', nargs='*',
                      default=pick_codec.codec_map.keys())
  parser.add_argument('--score', action='store_true', default=False)
  args = parser.parse_args()
  change_count = VerifyResults(args.codecs, score=args.score)
  print 'Change evaluations: ', change_count
  return 0

if __name__ == '__main__':
  sys.exit(main())
